/src
│-- main.cpp
│-- Core/
│   │-- Application.cpp
│   │-- Application.h
│   │-- Timer.cpp
│   │-- Timer.h
│-- Graphics/
│   │-- Renderer.cpp
│   │-- Renderer.h
│   │-- Camera.cpp
│   │-- Camera.h
│-- World/
│   │-- Chunk.cpp
│   │-- Chunk.h
│   │-- Block.cpp
│   │-- Block.h
│-- Input/
│   │-- InputManager.cpp
│   │-- InputManager.h
│-- Physics/
│   │-- Collision.cpp
│   │-- Collision.h
│-- Utils/
│   │-- Math.cpp
│   │-- Math.h
│-- Resources/
│   │-- Texture.cpp
│   │-- Texture.h
/assets
│-- textures/
│-- shaders/
/build

Main:
- main.cpp: The entry point of the program; initializes the Application class, starts the game loop, and handles any fatal errors or cleanups.

Core System:
- Application: Initializes SDL, manages the game loop (input, update, render), and handles cleanup.
- Timer: Tracks delta time for smooth animations and physics updates.

Graphics:
- Renderer: Handles chunk meshing, block rendering, and OpenGL or SDL rendering calls.
- Camera: Manages player view (first-person or free-fly) and handles perspective and movement.

World/Chunks:
- Block: Defines block types (air, grass, stone) and their properties (solid, transparent).
- Chunk: Stores blocks in a 3D array, generates meshes, and manages block updates.

Input System:
- InputManager: Processes keyboard and mouse input for movement and block interactions.

Physics:
- Collision: Handles player-world collisions using AABB (Axis-Aligned Bounding Boxes).
- Physics: Implements gravity, jumping, and basic physics like falling.

Math/Utils:
- Math: Provides 3D vector and matrix operations for movement, rotations, and positioning.

Resources:
- Texture: Loads and binds block textures using SDL or OpenGL.
- Shader: (Optional) Manages vertex and fragment shaders for lighting and special effects.

